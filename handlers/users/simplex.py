from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils.markdown import hlink, hbold, hcode, hitalic

from loader import dp, bot
from states.Simplex import Simplex
import logging

from utils.simplex.App import parse_equation, parse_function_coefs, App

STOP_WORD = '–°–¢–û–ü'
keyboard_start = ReplyKeyboardMarkup(row_width=2,
                                     resize_keyboard=True,
                                     one_time_keyboard=True,
                                     keyboard=[[
                                         KeyboardButton(text='–î–∞'),
                                         KeyboardButton(text='–ù–µ—Ç')
                                     ]])
keyboard_maxmin = ReplyKeyboardMarkup(row_width=2,
                                      one_time_keyboard=True,
                                      resize_keyboard=True,
                                      keyboard=[[
                                          KeyboardButton('–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º üìà'),
                                          KeyboardButton('–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º  üìâ')
                                      ]])
keyboard_method = ReplyKeyboardMarkup(row_width=3,
                                      one_time_keyboard=True,
                                      resize_keyboard=True,
                                      keyboard=[[
                                          KeyboardButton('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–∑–∏—Å–∞'),
                                          KeyboardButton('–î—É–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞'),
                                          KeyboardButton('–ì–æ–º–æ—Ä–∏'),
                                      ],
                                          [KeyboardButton(STOP_WORD)]])


@dp.message_handler(Command('simplex'))
async def start_simplex(message: types.Message, state: FSMContext):
    await message.answer('–≠—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏ –ø–æ–∏—Å–∫–∞ max/min —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö. '
                         f'{hbold("–ñ–µ–ª–∞–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? ;)")}\n'
                         f'–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {STOP_WORD} –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å ü•∞\n'
                         f'P.S. –ó–∞ {hlink("—Ä–µ—à–∞—Ç–µ–ª—å", "https://github.com/JettPy/Simlex-Table")} —Å–ø–∞—Å–∏–±–æ @suslik13.\n',
                         reply_markup=keyboard_start,
                         disable_web_page_preview=True)
    await Simplex.Start.set()


@dp.message_handler(state=Simplex.Start)
async def stop_or_variables(message: types.Message, state: FSMContext):
    if message.text in ['–ù–µ—Ç', STOP_WORD]:
        await state.reset_state(with_data=True)
    elif message.text != '–î–∞':
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
                             reply_markup=keyboard_start)
    else:
        await message.answer('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:')
        await Simplex.NumVariables.set()


@dp.message_handler(state=Simplex.NumVariables)
async def enter_num_variables(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
        return
    num_var = message.text
    if not num_var.isnumeric():
        await message.answer('–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
    else:
        async with state.proxy() as data:
            data['num_variables'] = num_var
        await message.answer('–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:')
        await Simplex.NumEquations.set()


@dp.message_handler(state=Simplex.NumEquations)
async def enter_num_equations(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
        return
    num_eq = message.text
    if not num_eq.isnumeric():
        await message.answer('–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑')
    else:
        async with state.proxy() as data:
            data['num_equations'] = num_eq
            data['num_entered_equations'] = 0
            data['matrix_a'] = []
            data['matrix_b'] = []
            data['signs'] = []
            ps = hitalic('P.S. –ö–∞–∫ —Ç—ã —É–∂–µ –º–æ–≥ –∑–∞–º–µ—Ç–∏—Ç—å –¥–ª—è "=" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "==" –∏ –≤–º–µ—Å—Ç–æ "–±–æ–ª—å—à–µ" –∏ "–º–µ–Ω—å—à–µ" '
                         '–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è "–±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ" –∏ "–º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –ø—Ä–∏ –≤–≤–æ–¥–µ üòã')
        await message.answer('–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –∑–Ω–∞–∫–∏ –¥–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Ññ1.\n'
                             f'–ü—Ä–∏–º–µ—Ä: –¥–ª—è {hcode("x_1 + 2*x_2 + x_3 = 4")} –≤–≤–µ–¥–∏ {hcode("1 2 1 == 4")}.\n\n'
                             f'{ps}')
        await Simplex.Equations.set()


@dp.message_handler(state=Simplex.Equations)
async def enter_equations(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
        return
    equation = message.text
    data = await state.get_data()
    num_entered_equations = int(data.get('num_entered_equations'))
    num_equations = int(data.get('num_equations'))
    num_variables = int(data.get('num_variables'))
    matrix_a = list(data.get('matrix_a'))
    matrix_b = list(data.get('matrix_b'))
    signs = list(data.get('signs'))

    logging.debug(f'num_entered_equations={num_entered_equations} '
                  f'num_equations={num_equations} '
                  f'num_variables={num_variables} '
                  f'matrix_a={matrix_a} '
                  f'matrix_b={matrix_b} '
                  f'signs={signs} ')

    is_error, error_str, answer = parse_equation(equation, num_variables)
    if is_error:
        await message.answer(f"{error_str}\n–ü–æ–ø—Ä–æ–±—É–π –µ—à—ë —Ä–∞–∑", parse_mode='Markdown')
        return
    num_entered_equations += 1
    (matrix_a_row, sign, b) = answer
    matrix_a.append(matrix_a_row)
    signs.append(sign)
    matrix_b.append(b)
    async with state.proxy() as data:
        data['matrix_a'] = matrix_a
        data['signs'] = signs
        data['matrix_b'] = matrix_b
        data['num_entered_equations'] = num_entered_equations
    if num_entered_equations == num_equations:
        await message.answer(
            "–í–≤–µ–¥–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏\n(–±–µ–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —á–ª–µ–Ω–∞, –Ω–æ —É—á–∏—Ç—ã–≤–∞—è –Ω–µ–≤–æ—à–µ–¥—à–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ 0*X_i):\n\n"
            f'–ü—Ä–∏–º–µ—Ä: –¥–ª—è {hcode("Z(x) = 2X_1 - X_2")} —Å —Ç—Ä–µ–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–≤–µ–¥–∏ {hcode("2 -1 0")}')
        await Simplex.Function.set()
    else:
        logging.debug(f"num_entered_equations={num_entered_equations}")
        await message.answer(f'–¢–µ–ø–µ—Ä—å —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Ññ{num_entered_equations + 1}. :)))')


@dp.message_handler(state=Simplex.Function)
async def enter_function(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
        return
    function = message.text
    data = await state.get_data()
    num_variables = int(data.get('num_variables'))

    is_error, error_str, matrix_c = parse_function_coefs(function, num_variables)
    if is_error:
        await message.answer(f"{error_str}\n–ü–æ–ø—Ä–æ–±—É–π –µ—à—ë —Ä–∞–∑", parse_mode='Markdown')
        return
    async with state.proxy() as data:
        data['matrix_c'] = matrix_c
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞–µ–º?',
                         reply_markup=keyboard_maxmin)
    await Simplex.Maximize.set()


@dp.message_handler(state=Simplex.Maximize)
async def choice_method(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
        return
    if message.text not in ['–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º üìà', '–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º  üìâ']:
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
                             reply_markup=keyboard_maxmin)
    else:
        data = await state.get_data()
        num_vars = int(data.get('num_variables'))
        num_equats = int(data.get('num_equations'))
        matrix_a = data.get('matrix_a')
        matrix_b = data.get('matrix_b')
        matrix_c = data.get('matrix_c')
        signs = data.get('signs')
        is_maximize = '–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ–º' in message.text
        deb = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {num_vars}\n" \
              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–π: {num_equats}\n" \
              f"–ú–∞—Ç—Ä–∏—Ü–∞ –ê: {matrix_a}\n" \
              f"–ú–∞—Ç—Ä–∏—Ü–∞ B: {matrix_b}\n" \
              f"–ú–∞—Ç—Ä–∏—Ü–∞ –°: {matrix_c}\n" \
              f"–ó–Ω–∞–∫–∏: {signs}\n" \
              f"–ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è: {'–¥–∞' if is_maximize else '–Ω–µ—Ç'}"

        app = App(variables_count=num_vars,
                  equations_count=num_equats,
                  matrix_a=matrix_a,
                  matrix_b=matrix_b,
                  matrix_c=matrix_c,
                  signs=signs,
                  is_maximize=is_maximize,
                  filename=f'answer{message.from_user.id}.txt')
        async with state.proxy() as data:
            data['app'] = app
        await message.answer('–¢—ã –≤–≤—ë–ª —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ:\n'
                             f'{hcode(deb)}\n'
                             f'{hitalic("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")}',
                             reply_markup=keyboard_method)
        await Simplex.Method.set()


@dp.message_handler(state=Simplex.Method)
async def solve_equations(message: types.Message, state: FSMContext):
    if message.text == STOP_WORD:
        await state.reset_state(with_data=True)
        return
    if message.text not in ['–ì–æ–º–æ—Ä–∏', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–∑–∏—Å–∞', '–î—É–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞']:
        await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫',
                             reply_markup=keyboard_maxmin)
    else:
        data = await state.get_data()
        app = data['app']
        try:
            open(f"answer{message.from_user.id}.txt", 'w')  # –æ—á–∏—Å—Ç–∏–º —Ñ–∞–π–ª
            if message.text == '–ì–æ–º–æ—Ä–∏':
                app.do_gomori(False)
                logging.debug("Gomori done")
            elif message.text == '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–∑–∏—Å–∞':
                app.do_artificial_basis(False)
                logging.debug("ArtificialBasic done")
            else:
                app.do_dual_task(False)
                logging.debug('DualTask done')
            temp = open(f"answer{message.from_user.id}.txt", 'r')
            answer = "\n".join(temp.readlines())
            if len(answer) <= 4000:
                await message.answer('–ü—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç:\n'
                                     f'{hcode(answer)}\n'
                                     f'–î–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–∞–π–ª–æ–º –Ω–∏–∂–µ.')
            await message.answer_document(document=InputFile(f"answer{message.from_user.id}.txt"))
            await message.answer('–ß—Ç–æ-—Ç–æ –µ—â—ë?',
                                 reply_markup=keyboard_method)
        except Exception as err:
            await message.answer(f"–û—à–∏–±–∫–∞! {err}\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –≤—Å—ë –∑–∞–Ω–æ–≤–æ –∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é "
                                 f"—Ä–∞—Å—Å–∫–∞–∂–∏ @Dimo4kaa —á—Ç–æ –≤–≤–æ–¥–∏–ª(–∞)")
            await state.reset_state(with_data=True)
            raise err


def is_number(s: str):
    if s.count('.') != 0:
        try:
            float(s)
            return True
        except ValueError:
            return False
    else:
        try:
            int(s)
            return True
        except ValueError:
            return False
